#!/usr/bin/env python

import csv
import functools
import sys

# Mininet imports
from mininet.log import lg, info, error, debug, output
from mininet.util import quietRun
from mininet.node import Host, OVSSwitch, RemoteController
from mininet.cli import CLI
from mininet.net import Mininet


def _read_csv(f):
    with open(f, 'r') as fd:
        return list(csv.reader(fd))

switch_cache = {}
def _get_switch(net, switch_id):
    # Drop the swich model
    switch_id = switch_id[0:switch_id.rfind('-')]
    if switch_id not in switch_cache:
        print "CACHE MISS: %s" % switch_id
        switch_cache[switch_id] = net.addSwitch(switch_id, dpid=str(hash(switch_id)))
    return switch_cache[switch_id]

def _create_switches(net, links):
    for link in links:
        s_src, p_src = _get_switch(net, link[0]), int(link[1])
        s_dst, p_dst = _get_switch(net, link[2]), int(link[3])
        net.addLink(s_src, s_dst, p_src, p_dst)

def _create_hosts(net, links):
    for link in links: 
        s_src, p_src = _get_switch(net, link[0]), int(link[1])
        h_name, h_mac, h_ip = link[2], link[3], link[4]
        h = net.addHost(h_name, mac=h_mac, ip=h_ip)
        net.addLink(h, s_src, 1, p_src)

def main():
    ip, port ="127.0.0.1", 6633

    ctrlr = lambda n: RemoteController(n, defaultIP=ip, port=port, inNamespace=False)
    net = Mininet(switch=OVSSwitch, controller=ctrlr, autoStaticArp=True)
    c1 = net.addController('c1')

    _create_hosts(net, _read_csv('data/testbed-host-links.csv'))
    _create_switches(net, _read_csv('data/testbed-switch-links.csv'))

    # Set up logging etc.
    lg.setLogLevel('info')
    lg.setLogLevel('output')

    # Start the network and prime other ARP caches
    net.start()
    # net.staticArp()

    # Enter CLI mode
    output("Network ready\n")
    output("Press Ctrl-d or type exit to quit\n")
    CLI(net)
    net.stop()

if __name__ == '__main__':
    main()
